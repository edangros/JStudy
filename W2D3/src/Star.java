public class Star {
    public static void main(String[] args){

        //별그리기 방법 1 : 지정된 횟수만큼 문자열 더하기
        String s;
        for(int i = 0;i<10;i++){
            s= "";
            //문자열 곱셈이 없으므로 문자를 정해진 횟수만큼 더합니다
            for(int j=0;j<i;j++){
                s = s+"*";
                // 다만 intellij IDEA(이클립스같은 프로그램)에서 '반복문 내에서의 문자열 덧셈'이라고 경고를 보냅니다.
                //      (경고는 '오류'와는 달리 프로그램이 작동은 하지만 문제가 잠재되어 있을때
                //       IDE(이클립스나 IDEA 같은 프로그램들)에서 수정을 권고하기 위해 표시시키는 메세지입니다)
                // 이는 루프 안에서 문자열 연산이 돌 경우 '리터럴'이 급증해 메모리에 악영향을 주기 때문입니다.
                // "" -> "*" -> "**"->"***"..... 이렇게 모든 문자가 메모리에 저장되어버리게 되고
                // 가비지 콜렉터가 돌기 전까지 저 데이터는 메모리에 남으며
                // 가비지 콜렉터가 쓰레기로 판별해서 치우는 과정에서 컴퓨터 자원을 또 소모하게 됩니다.
                // 따라서 문자열 연산이 많고, 적극적으로 권장하는 파이썬과 달리 대부분의 C계열 언어들은
                // 성능 향상을 위하여 문자열 연산을 문자열로 계속 진행하는 데에 비교적 소극적입니다.
                // (언어의 철학이 다소 다릅니다. 파이썬은 '파이썬다움'이라는 말까지 쓰일 정도로 튑니다.)
            }
            System.out.println(s);
        }

        //별그리기 방법 2 : 지정된 횟수만큼 그리기
        for(int i = 0; i<10; i++){
            for(int j = 0;j<=i;j++){
                System.out.print("*");//* 하나만, 줄바꿈 없이 그림
            }
            System.out.println();//줄바꾸기
        }

        //별그리기 응용 : 거꾸로 그리기
        for(int i = 0;i<10;i++){
            for(int j = 0; j<(10-i); j++){//부등호 주의!
                System.out.print("*");//* 하나만, 줄바꿈 없이 그림
            }
            System.out.println();//줄바꾸기
        }
    }
}
